{"ast":null,"code":"import { createSelector as reselectCreateSelector } from 'reselect';\nimport { buildWarning } from './warning';\nconst cacheContainer = {\n  cache: null\n};\nconst missingInstanceIdWarning = buildWarning(['MUI: A selector was called without passing the instance ID, which may impact the performance of the grid.', 'To fix, call it with `apiRef`, e.g. `mySelector(apiRef)`, or pass the instance ID explicitly, e.g `mySelector(state, apiRef.current.instanceId)`.']);\nexport const createSelector = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  if (cacheContainer.cache === null) {\n    cacheContainer.cache = {};\n  }\n  const selector = function () {\n    for (var _len2 = arguments.length, selectorArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      selectorArgs[_key2] = arguments[_key2];\n    }\n    const [stateOrApiRef, instanceId] = selectorArgs;\n    const isApiRef = !!stateOrApiRef.current;\n    const cacheKey = isApiRef ? stateOrApiRef.current.instanceId : instanceId != null ? instanceId : 'default';\n    const state = isApiRef ? stateOrApiRef.current.state : stateOrApiRef;\n    if (process.env.NODE_ENV !== 'production') {\n      if (cacheKey === 'default') {\n        missingInstanceIdWarning();\n      }\n    }\n    if (cacheContainer.cache === null) {\n      cacheContainer.cache = {};\n    }\n    const {\n      cache\n    } = cacheContainer;\n    if (cache[cacheKey] && cache[cacheKey].get(args)) {\n      // We pass the cache key because the called selector might have as\n      // dependency another selector created with this `createSelector`.\n      return cache[cacheKey].get(args)(state, cacheKey);\n    }\n    const newSelector = reselectCreateSelector(...args);\n    if (!cache[cacheKey]) {\n      cache[cacheKey] = new Map();\n    }\n    cache[cacheKey].set(args, newSelector);\n    return newSelector(state, cacheKey);\n  }; // We use this property to detect if the selector was created with createSelector\n  // or it's only a simple function the receives the state and returns part of it.\n\n  selector.acceptsApiRef = true;\n  return selector;\n}; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport const unstable_resetCreateSelectorCache = cacheKey => {\n  if (typeof cacheKey !== 'undefined') {\n    if (cacheContainer.cache && cacheContainer.cache[cacheKey]) {\n      delete cacheContainer.cache[cacheKey];\n    }\n  } else {\n    cacheContainer.cache = null;\n  }\n};","map":{"version":3,"names":["createSelector","reselectCreateSelector","buildWarning","cacheContainer","cache","missingInstanceIdWarning","args","selector","selectorArgs","stateOrApiRef","instanceId","isApiRef","current","cacheKey","state","process","env","NODE_ENV","get","newSelector","Map","set","acceptsApiRef","unstable_resetCreateSelectorCache"],"sources":["/Users/indhuyelineni/Desktop/Projects/React-Dashboard/node_modules/@mui/x-data-grid/utils/createSelector.js"],"sourcesContent":["import { createSelector as reselectCreateSelector } from 'reselect';\nimport { buildWarning } from './warning';\nconst cacheContainer = {\n  cache: null\n};\nconst missingInstanceIdWarning = buildWarning(['MUI: A selector was called without passing the instance ID, which may impact the performance of the grid.', 'To fix, call it with `apiRef`, e.g. `mySelector(apiRef)`, or pass the instance ID explicitly, e.g `mySelector(state, apiRef.current.instanceId)`.']);\nexport const createSelector = (...args) => {\n  if (cacheContainer.cache === null) {\n    cacheContainer.cache = {};\n  }\n\n  const selector = (...selectorArgs) => {\n    const [stateOrApiRef, instanceId] = selectorArgs;\n    const isApiRef = !!stateOrApiRef.current;\n    const cacheKey = isApiRef ? stateOrApiRef.current.instanceId : instanceId != null ? instanceId : 'default';\n    const state = isApiRef ? stateOrApiRef.current.state : stateOrApiRef;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (cacheKey === 'default') {\n        missingInstanceIdWarning();\n      }\n    }\n\n    if (cacheContainer.cache === null) {\n      cacheContainer.cache = {};\n    }\n\n    const {\n      cache\n    } = cacheContainer;\n\n    if (cache[cacheKey] && cache[cacheKey].get(args)) {\n      // We pass the cache key because the called selector might have as\n      // dependency another selector created with this `createSelector`.\n      return cache[cacheKey].get(args)(state, cacheKey);\n    }\n\n    const newSelector = reselectCreateSelector(...args);\n\n    if (!cache[cacheKey]) {\n      cache[cacheKey] = new Map();\n    }\n\n    cache[cacheKey].set(args, newSelector);\n    return newSelector(state, cacheKey);\n  }; // We use this property to detect if the selector was created with createSelector\n  // or it's only a simple function the receives the state and returns part of it.\n\n\n  selector.acceptsApiRef = true;\n  return selector;\n}; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport const unstable_resetCreateSelectorCache = cacheKey => {\n  if (typeof cacheKey !== 'undefined') {\n    if (cacheContainer.cache && cacheContainer.cache[cacheKey]) {\n      delete cacheContainer.cache[cacheKey];\n    }\n  } else {\n    cacheContainer.cache = null;\n  }\n};"],"mappings":"AAAA,SAASA,cAAc,IAAIC,sBAAsB,QAAQ,UAAU;AACnE,SAASC,YAAY,QAAQ,WAAW;AACxC,MAAMC,cAAc,GAAG;EACrBC,KAAK,EAAE;AACT,CAAC;AACD,MAAMC,wBAAwB,GAAGH,YAAY,CAAC,CAAC,2GAA2G,EAAE,mJAAmJ,CAAC,CAAC;AACjT,OAAO,MAAMF,cAAc,GAAG,YAAa;EAAA,kCAATM,IAAI;IAAJA,IAAI;EAAA;EACpC,IAAIH,cAAc,CAACC,KAAK,KAAK,IAAI,EAAE;IACjCD,cAAc,CAACC,KAAK,GAAG,CAAC,CAAC;EAC3B;EAEA,MAAMG,QAAQ,GAAG,YAAqB;IAAA,mCAAjBC,YAAY;MAAZA,YAAY;IAAA;IAC/B,MAAM,CAACC,aAAa,EAAEC,UAAU,CAAC,GAAGF,YAAY;IAChD,MAAMG,QAAQ,GAAG,CAAC,CAACF,aAAa,CAACG,OAAO;IACxC,MAAMC,QAAQ,GAAGF,QAAQ,GAAGF,aAAa,CAACG,OAAO,CAACF,UAAU,GAAGA,UAAU,IAAI,IAAI,GAAGA,UAAU,GAAG,SAAS;IAC1G,MAAMI,KAAK,GAAGH,QAAQ,GAAGF,aAAa,CAACG,OAAO,CAACE,KAAK,GAAGL,aAAa;IAEpE,IAAIM,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAIJ,QAAQ,KAAK,SAAS,EAAE;QAC1BR,wBAAwB,EAAE;MAC5B;IACF;IAEA,IAAIF,cAAc,CAACC,KAAK,KAAK,IAAI,EAAE;MACjCD,cAAc,CAACC,KAAK,GAAG,CAAC,CAAC;IAC3B;IAEA,MAAM;MACJA;IACF,CAAC,GAAGD,cAAc;IAElB,IAAIC,KAAK,CAACS,QAAQ,CAAC,IAAIT,KAAK,CAACS,QAAQ,CAAC,CAACK,GAAG,CAACZ,IAAI,CAAC,EAAE;MAChD;MACA;MACA,OAAOF,KAAK,CAACS,QAAQ,CAAC,CAACK,GAAG,CAACZ,IAAI,CAAC,CAACQ,KAAK,EAAED,QAAQ,CAAC;IACnD;IAEA,MAAMM,WAAW,GAAGlB,sBAAsB,CAAC,GAAGK,IAAI,CAAC;IAEnD,IAAI,CAACF,KAAK,CAACS,QAAQ,CAAC,EAAE;MACpBT,KAAK,CAACS,QAAQ,CAAC,GAAG,IAAIO,GAAG,EAAE;IAC7B;IAEAhB,KAAK,CAACS,QAAQ,CAAC,CAACQ,GAAG,CAACf,IAAI,EAAEa,WAAW,CAAC;IACtC,OAAOA,WAAW,CAACL,KAAK,EAAED,QAAQ,CAAC;EACrC,CAAC,CAAC,CAAC;EACH;;EAGAN,QAAQ,CAACe,aAAa,GAAG,IAAI;EAC7B,OAAOf,QAAQ;AACjB,CAAC,CAAC,CAAC;;AAEH,OAAO,MAAMgB,iCAAiC,GAAGV,QAAQ,IAAI;EAC3D,IAAI,OAAOA,QAAQ,KAAK,WAAW,EAAE;IACnC,IAAIV,cAAc,CAACC,KAAK,IAAID,cAAc,CAACC,KAAK,CAACS,QAAQ,CAAC,EAAE;MAC1D,OAAOV,cAAc,CAACC,KAAK,CAACS,QAAQ,CAAC;IACvC;EACF,CAAC,MAAM;IACLV,cAAc,CAACC,KAAK,GAAG,IAAI;EAC7B;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}