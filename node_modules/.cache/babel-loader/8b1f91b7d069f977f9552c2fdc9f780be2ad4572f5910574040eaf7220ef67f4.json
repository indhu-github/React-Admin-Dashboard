{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { getDataGridUtilityClass } from '../../../constants';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_CHECKBOX_SELECTION_FIELD } from '../../../colDef';\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  return React.useMemo(() => {\n    const slots = {\n      cellCheckbox: ['cellCheckbox'],\n      columnHeaderCheckbox: ['columnHeaderCheckbox']\n    };\n    return composeClasses(slots, getDataGridUtilityClass, classes);\n  }, [classes]);\n};\nexport const useGridSelectionPreProcessors = (apiRef, props) => {\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const updateSelectionColumn = React.useCallback(columnsState => {\n    const selectionColumn = _extends({}, GRID_CHECKBOX_SELECTION_COL_DEF, {\n      cellClassName: classes.cellCheckbox,\n      headerClassName: classes.columnHeaderCheckbox,\n      headerName: apiRef.current.getLocaleText('checkboxSelectionHeaderName')\n    });\n    const shouldHaveSelectionColumn = props.checkboxSelection;\n    const haveSelectionColumn = columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] != null;\n    if (shouldHaveSelectionColumn && !haveSelectionColumn) {\n      columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = selectionColumn;\n      columnsState.all = [GRID_CHECKBOX_SELECTION_FIELD, ...columnsState.all];\n    } else if (!shouldHaveSelectionColumn && haveSelectionColumn) {\n      delete columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD];\n      columnsState.all = columnsState.all.filter(field => field !== GRID_CHECKBOX_SELECTION_FIELD);\n    } else if (shouldHaveSelectionColumn && haveSelectionColumn) {\n      columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = _extends({}, selectionColumn, columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD]);\n    }\n    return columnsState;\n  }, [apiRef, classes, props.checkboxSelection]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateSelectionColumn);\n};","map":{"version":3,"names":["_extends","React","unstable_composeClasses","composeClasses","useGridRegisterPipeProcessor","getDataGridUtilityClass","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_CHECKBOX_SELECTION_FIELD","useUtilityClasses","ownerState","classes","useMemo","slots","cellCheckbox","columnHeaderCheckbox","useGridSelectionPreProcessors","apiRef","props","updateSelectionColumn","useCallback","columnsState","selectionColumn","cellClassName","headerClassName","headerName","current","getLocaleText","shouldHaveSelectionColumn","checkboxSelection","haveSelectionColumn","lookup","all","filter","field"],"sources":["/Users/indhuyelineni/Desktop/Projects/React-Dashboard/node_modules/@mui/x-data-grid/hooks/features/selection/useGridSelectionPreProcessors.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { getDataGridUtilityClass } from '../../../constants';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_CHECKBOX_SELECTION_FIELD } from '../../../colDef';\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  return React.useMemo(() => {\n    const slots = {\n      cellCheckbox: ['cellCheckbox'],\n      columnHeaderCheckbox: ['columnHeaderCheckbox']\n    };\n    return composeClasses(slots, getDataGridUtilityClass, classes);\n  }, [classes]);\n};\n\nexport const useGridSelectionPreProcessors = (apiRef, props) => {\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const updateSelectionColumn = React.useCallback(columnsState => {\n    const selectionColumn = _extends({}, GRID_CHECKBOX_SELECTION_COL_DEF, {\n      cellClassName: classes.cellCheckbox,\n      headerClassName: classes.columnHeaderCheckbox,\n      headerName: apiRef.current.getLocaleText('checkboxSelectionHeaderName')\n    });\n\n    const shouldHaveSelectionColumn = props.checkboxSelection;\n    const haveSelectionColumn = columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] != null;\n\n    if (shouldHaveSelectionColumn && !haveSelectionColumn) {\n      columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = selectionColumn;\n      columnsState.all = [GRID_CHECKBOX_SELECTION_FIELD, ...columnsState.all];\n    } else if (!shouldHaveSelectionColumn && haveSelectionColumn) {\n      delete columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD];\n      columnsState.all = columnsState.all.filter(field => field !== GRID_CHECKBOX_SELECTION_FIELD);\n    } else if (shouldHaveSelectionColumn && haveSelectionColumn) {\n      columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = _extends({}, selectionColumn, columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD]);\n    }\n\n    return columnsState;\n  }, [apiRef, classes, props.checkboxSelection]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateSelectionColumn);\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,uBAAuB,IAAIC,cAAc,QAAQ,eAAe;AACzE,SAASC,4BAA4B,QAAQ,2BAA2B;AACxE,SAASC,uBAAuB,QAAQ,oBAAoB;AAC5D,SAASC,+BAA+B,EAAEC,6BAA6B,QAAQ,iBAAiB;AAEhG,MAAMC,iBAAiB,GAAGC,UAAU,IAAI;EACtC,MAAM;IACJC;EACF,CAAC,GAAGD,UAAU;EACd,OAAOR,KAAK,CAACU,OAAO,CAAC,MAAM;IACzB,MAAMC,KAAK,GAAG;MACZC,YAAY,EAAE,CAAC,cAAc,CAAC;MAC9BC,oBAAoB,EAAE,CAAC,sBAAsB;IAC/C,CAAC;IACD,OAAOX,cAAc,CAACS,KAAK,EAAEP,uBAAuB,EAAEK,OAAO,CAAC;EAChE,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;AACf,CAAC;AAED,OAAO,MAAMK,6BAA6B,GAAG,CAACC,MAAM,EAAEC,KAAK,KAAK;EAC9D,MAAMR,UAAU,GAAG;IACjBC,OAAO,EAAEO,KAAK,CAACP;EACjB,CAAC;EACD,MAAMA,OAAO,GAAGF,iBAAiB,CAACC,UAAU,CAAC;EAC7C,MAAMS,qBAAqB,GAAGjB,KAAK,CAACkB,WAAW,CAACC,YAAY,IAAI;IAC9D,MAAMC,eAAe,GAAGrB,QAAQ,CAAC,CAAC,CAAC,EAAEM,+BAA+B,EAAE;MACpEgB,aAAa,EAAEZ,OAAO,CAACG,YAAY;MACnCU,eAAe,EAAEb,OAAO,CAACI,oBAAoB;MAC7CU,UAAU,EAAER,MAAM,CAACS,OAAO,CAACC,aAAa,CAAC,6BAA6B;IACxE,CAAC,CAAC;IAEF,MAAMC,yBAAyB,GAAGV,KAAK,CAACW,iBAAiB;IACzD,MAAMC,mBAAmB,GAAGT,YAAY,CAACU,MAAM,CAACvB,6BAA6B,CAAC,IAAI,IAAI;IAEtF,IAAIoB,yBAAyB,IAAI,CAACE,mBAAmB,EAAE;MACrDT,YAAY,CAACU,MAAM,CAACvB,6BAA6B,CAAC,GAAGc,eAAe;MACpED,YAAY,CAACW,GAAG,GAAG,CAACxB,6BAA6B,EAAE,GAAGa,YAAY,CAACW,GAAG,CAAC;IACzE,CAAC,MAAM,IAAI,CAACJ,yBAAyB,IAAIE,mBAAmB,EAAE;MAC5D,OAAOT,YAAY,CAACU,MAAM,CAACvB,6BAA6B,CAAC;MACzDa,YAAY,CAACW,GAAG,GAAGX,YAAY,CAACW,GAAG,CAACC,MAAM,CAACC,KAAK,IAAIA,KAAK,KAAK1B,6BAA6B,CAAC;IAC9F,CAAC,MAAM,IAAIoB,yBAAyB,IAAIE,mBAAmB,EAAE;MAC3DT,YAAY,CAACU,MAAM,CAACvB,6BAA6B,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,EAAEqB,eAAe,EAAED,YAAY,CAACU,MAAM,CAACvB,6BAA6B,CAAC,CAAC;IACxI;IAEA,OAAOa,YAAY;EACrB,CAAC,EAAE,CAACJ,MAAM,EAAEN,OAAO,EAAEO,KAAK,CAACW,iBAAiB,CAAC,CAAC;EAC9CxB,4BAA4B,CAACY,MAAM,EAAE,gBAAgB,EAAEE,qBAAqB,CAAC;AAC/E,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}