{"ast":null,"code":"import { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nconst flatRowTreeCreationMethod = _ref => {\n  let {\n    ids,\n    idRowsLookup,\n    idToIdLookup,\n    previousTree\n  } = _ref;\n  const tree = {};\n  for (let i = 0; i < ids.length; i += 1) {\n    const rowId = ids[i];\n    if (previousTree && previousTree[rowId] && previousTree[rowId].depth === 0 && previousTree[rowId].parent == null &&\n    // pinned row can be unpinned\n    !previousTree[rowId].isPinned) {\n      tree[rowId] = previousTree[rowId];\n    } else {\n      tree[rowId] = {\n        id: rowId,\n        depth: 0,\n        parent: null,\n        groupingKey: '',\n        groupingField: null\n      };\n    }\n  }\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepth: 1,\n    idRowsLookup,\n    idToIdLookup,\n    ids\n  };\n};\nexport const useGridRowsPreProcessors = apiRef => {\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};","map":{"version":3,"names":["GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","flatRowTreeCreationMethod","ids","idRowsLookup","idToIdLookup","previousTree","tree","i","length","rowId","depth","parent","isPinned","id","groupingKey","groupingField","groupingName","treeDepth","useGridRowsPreProcessors","apiRef"],"sources":["/Users/indhuyelineni/Desktop/Projects/React-Dashboard/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsPreProcessors.js"],"sourcesContent":["import { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\n\nconst flatRowTreeCreationMethod = ({\n  ids,\n  idRowsLookup,\n  idToIdLookup,\n  previousTree\n}) => {\n  const tree = {};\n\n  for (let i = 0; i < ids.length; i += 1) {\n    const rowId = ids[i];\n\n    if (previousTree && previousTree[rowId] && previousTree[rowId].depth === 0 && previousTree[rowId].parent == null && // pinned row can be unpinned\n    !previousTree[rowId].isPinned) {\n      tree[rowId] = previousTree[rowId];\n    } else {\n      tree[rowId] = {\n        id: rowId,\n        depth: 0,\n        parent: null,\n        groupingKey: '',\n        groupingField: null\n      };\n    }\n  }\n\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepth: 1,\n    idRowsLookup,\n    idToIdLookup,\n    ids\n  };\n};\n\nexport const useGridRowsPreProcessors = apiRef => {\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};"],"mappings":"AAAA,SAASA,qBAAqB,EAAEC,gCAAgC,QAAQ,+BAA+B;AAEvG,MAAMC,yBAAyB,GAAG,QAK5B;EAAA,IAL6B;IACjCC,GAAG;IACHC,YAAY;IACZC,YAAY;IACZC;EACF,CAAC;EACC,MAAMC,IAAI,GAAG,CAAC,CAAC;EAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,GAAG,CAACM,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IACtC,MAAME,KAAK,GAAGP,GAAG,CAACK,CAAC,CAAC;IAEpB,IAAIF,YAAY,IAAIA,YAAY,CAACI,KAAK,CAAC,IAAIJ,YAAY,CAACI,KAAK,CAAC,CAACC,KAAK,KAAK,CAAC,IAAIL,YAAY,CAACI,KAAK,CAAC,CAACE,MAAM,IAAI,IAAI;IAAI;IACpH,CAACN,YAAY,CAACI,KAAK,CAAC,CAACG,QAAQ,EAAE;MAC7BN,IAAI,CAACG,KAAK,CAAC,GAAGJ,YAAY,CAACI,KAAK,CAAC;IACnC,CAAC,MAAM;MACLH,IAAI,CAACG,KAAK,CAAC,GAAG;QACZI,EAAE,EAAEJ,KAAK;QACTC,KAAK,EAAE,CAAC;QACRC,MAAM,EAAE,IAAI;QACZG,WAAW,EAAE,EAAE;QACfC,aAAa,EAAE;MACjB,CAAC;IACH;EACF;EAEA,OAAO;IACLC,YAAY,EAAEjB,qBAAqB;IACnCO,IAAI;IACJW,SAAS,EAAE,CAAC;IACZd,YAAY;IACZC,YAAY;IACZF;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMgB,wBAAwB,GAAGC,MAAM,IAAI;EAChDnB,gCAAgC,CAACmB,MAAM,EAAEpB,qBAAqB,EAAE,iBAAiB,EAAEE,yBAAyB,CAAC;AAC/G,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}