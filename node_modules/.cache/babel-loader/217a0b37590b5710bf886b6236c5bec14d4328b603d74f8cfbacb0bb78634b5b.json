{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { unwrapGroupingColumnModel, hasGroupPath } from './useGridColumnGrouping';\nexport const useGridColumnGroupingPreProcessors = (apiRef, props) => {\n  var _props$experimentalFe2;\n  const addHeaderGroups = React.useCallback(columnsState => {\n    var _props$experimentalFe;\n    if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {\n      return columnsState;\n    }\n    const unwrappedGroupingModel = unwrapGroupingColumnModel(props.columnGroupingModel);\n    columnsState.all.forEach(field => {\n      var _unwrappedGroupingMod, _unwrappedGroupingMod2;\n      const newGroupPath = (_unwrappedGroupingMod = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod : [];\n      const lookupElement = columnsState.lookup[field];\n      if (hasGroupPath(lookupElement) && isDeepEqual(newGroupPath, lookupElement == null ? void 0 : lookupElement.groupPath)) {\n        // Avoid modifying the pointer to allow shadow comparison in https://github.com/mui/mui-x/blob/f90afbf10a1264ee8b453d7549dd7cdd6110a4ed/packages/grid/x-data-grid/src/hooks/features/columns/gridColumnsUtils.ts#L446:L453\n        return;\n      }\n      columnsState.lookup[field] = _extends({}, columnsState.lookup[field], {\n        groupPath: (_unwrappedGroupingMod2 = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod2 : []\n      });\n    });\n    return columnsState;\n  }, [props.columnGroupingModel, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.columnGrouping]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', addHeaderGroups);\n};","map":{"version":3,"names":["_extends","React","useGridRegisterPipeProcessor","isDeepEqual","unwrapGroupingColumnModel","hasGroupPath","useGridColumnGroupingPreProcessors","apiRef","props","_props$experimentalFe2","addHeaderGroups","useCallback","columnsState","_props$experimentalFe","experimentalFeatures","columnGrouping","unwrappedGroupingModel","columnGroupingModel","all","forEach","field","_unwrappedGroupingMod","_unwrappedGroupingMod2","newGroupPath","lookupElement","lookup","groupPath"],"sources":["/Users/indhuyelineni/Desktop/Projects/React-Dashboard/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/useGridColumnGroupingPreProcessors.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { unwrapGroupingColumnModel, hasGroupPath } from './useGridColumnGrouping';\nexport const useGridColumnGroupingPreProcessors = (apiRef, props) => {\n  var _props$experimentalFe2;\n\n  const addHeaderGroups = React.useCallback(columnsState => {\n    var _props$experimentalFe;\n\n    if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {\n      return columnsState;\n    }\n\n    const unwrappedGroupingModel = unwrapGroupingColumnModel(props.columnGroupingModel);\n    columnsState.all.forEach(field => {\n      var _unwrappedGroupingMod, _unwrappedGroupingMod2;\n\n      const newGroupPath = (_unwrappedGroupingMod = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod : [];\n      const lookupElement = columnsState.lookup[field];\n\n      if (hasGroupPath(lookupElement) && isDeepEqual(newGroupPath, lookupElement == null ? void 0 : lookupElement.groupPath)) {\n        // Avoid modifying the pointer to allow shadow comparison in https://github.com/mui/mui-x/blob/f90afbf10a1264ee8b453d7549dd7cdd6110a4ed/packages/grid/x-data-grid/src/hooks/features/columns/gridColumnsUtils.ts#L446:L453\n        return;\n      }\n\n      columnsState.lookup[field] = _extends({}, columnsState.lookup[field], {\n        groupPath: (_unwrappedGroupingMod2 = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod2 : []\n      });\n    });\n    return columnsState;\n  }, [props.columnGroupingModel, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.columnGrouping]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', addHeaderGroups);\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,4BAA4B,QAAQ,2BAA2B;AACxE,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,yBAAyB,EAAEC,YAAY,QAAQ,yBAAyB;AACjF,OAAO,MAAMC,kCAAkC,GAAG,CAACC,MAAM,EAAEC,KAAK,KAAK;EACnE,IAAIC,sBAAsB;EAE1B,MAAMC,eAAe,GAAGT,KAAK,CAACU,WAAW,CAACC,YAAY,IAAI;IACxD,IAAIC,qBAAqB;IAEzB,IAAI,EAAE,CAACA,qBAAqB,GAAGL,KAAK,CAACM,oBAAoB,KAAK,IAAI,IAAID,qBAAqB,CAACE,cAAc,CAAC,EAAE;MAC3G,OAAOH,YAAY;IACrB;IAEA,MAAMI,sBAAsB,GAAGZ,yBAAyB,CAACI,KAAK,CAACS,mBAAmB,CAAC;IACnFL,YAAY,CAACM,GAAG,CAACC,OAAO,CAACC,KAAK,IAAI;MAChC,IAAIC,qBAAqB,EAAEC,sBAAsB;MAEjD,MAAMC,YAAY,GAAG,CAACF,qBAAqB,GAAGL,sBAAsB,CAACI,KAAK,CAAC,KAAK,IAAI,GAAGC,qBAAqB,GAAG,EAAE;MACjH,MAAMG,aAAa,GAAGZ,YAAY,CAACa,MAAM,CAACL,KAAK,CAAC;MAEhD,IAAIf,YAAY,CAACmB,aAAa,CAAC,IAAIrB,WAAW,CAACoB,YAAY,EAAEC,aAAa,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACE,SAAS,CAAC,EAAE;QACtH;QACA;MACF;MAEAd,YAAY,CAACa,MAAM,CAACL,KAAK,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC,EAAEY,YAAY,CAACa,MAAM,CAACL,KAAK,CAAC,EAAE;QACpEM,SAAS,EAAE,CAACJ,sBAAsB,GAAGN,sBAAsB,CAACI,KAAK,CAAC,KAAK,IAAI,GAAGE,sBAAsB,GAAG;MACzG,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOV,YAAY;EACrB,CAAC,EAAE,CAACJ,KAAK,CAACS,mBAAmB,EAAE,CAACR,sBAAsB,GAAGD,KAAK,CAACM,oBAAoB,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGL,sBAAsB,CAACM,cAAc,CAAC,CAAC;EAC/Ib,4BAA4B,CAACK,MAAM,EAAE,gBAAgB,EAAEG,eAAe,CAAC;AACzE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}